from typing import Any, List, Tuple, Union

class Entry:
    section: Any
    name: Any
    dtype: Any
    description: Any
    __value: Any
    def __init__(self, section: str, name: str, dtype: str, condition: str = ..., description: str = ...) -> None: ...
    @property
    def value(self) -> Any: ...
    @value.setter
    def value(self, value: Any) -> None: ...
    valid: Any
    def _set_validator(self, condition: str) -> None: ...
    def _convert(self, value: Any) -> Any: ...
    def _validate(self, value: Any) -> bool: ...
    def _boolean(self, value: Union[str, bool]) -> bool: ...
    def __str__(self) -> str: ...

class ArrayEntry(Entry):
    size: Any
    def __init__(self, section: str, name: str, dtype: str, size: int, condition: str = ..., description: str = ...) -> None: ...
    def _convert(self, values: Any) -> Tuple: ...
    def _validate(self, values: Any) -> bool: ...

class Card:
    units: str
    @classmethod
    def set_units(cls, units: str) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class ExternalCard(Card):
    charge: Any
    pos: Any
    spread: Any
    dim: Any
    axis: Any
    def __init__(self, charge: float, pos: List[str], spread: float, dim: int, axis: int) -> None: ...

class RegionCard(Card):
    static: Any
    optical: Any
    pos: Any
    width: Any
    spread: Any
    dim: Any
    axis: Any
    def __init__(self, static: float, optical: float, pos: List[str], width: float, spread: float, dim: int, axis: int) -> None: ...
