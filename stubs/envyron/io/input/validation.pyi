from pydantic import BaseModel
from pydantic.fields import ModelField as ModelField
from typing import Any, Dict, List, Optional
from typing_extensions import TypeAlias

IntFloat: TypeAlias

class CardModel(BaseModel):
    position: List[float] = ...
    spread: float = ...
    dim: int = ...
    axis: int = ...
    def valid_dimension(cls: Any, value: int) -> int: ...
    def valid_axis(cls: Any, value: int) -> int: ...

class ExternalModel(CardModel):
    charge: float
    def ne_zero(cls: Any, value: IntFloat) -> IntFloat: ...
    def ge_zero(cls: Any, value: IntFloat) -> IntFloat: ...

class RegionModel(CardModel):
    static: float = ...
    optical: float = ...
    width: float = ...
    def ge_zero(cls: Any, value: IntFloat) -> IntFloat: ...
    def ge_one(cls: Any, value: IntFloat) -> IntFloat: ...

class CardContainer(BaseModel):
    units: str = ...
    def valid_units(cls: Any, value: str) -> str: ...

class ExternalsContainer(CardContainer):
    functions: List[List[ExternalModel]] = ...

class RegionsContainer(CardContainer):
    functions: List[List[RegionModel]] = ...

class EnvironInputModel(BaseModel):
    natoms: int = ...
    debug: bool = ...
    restart: bool = ...
    verbosity: int = ...
    threshold: float = ...
    nskip: int = ...
    env_type: str = ...
    nrep: List[int] = ...
    system_ntyp: int = ...
    system_dim: int = ...
    system_axis: int = ...
    system_pos: List[float] = ...
    need_electrostatic: bool = ...
    atomicspread: List[float] = ...
    corespread: List[float] = ...
    static_permittivity: float = ...
    optical_permittivity: float = ...
    surface_tension: float = ...
    pressure: float = ...
    confine: float = ...
    electrolyte_concentration: float = ...
    electrolyte_formula: Optional[List[int]] = ...
    electrolyte_linearized: bool = ...
    electrolyte_entropy: str = ...
    cionmax: float = ...
    rion: float = ...
    temperature: float = ...
    sc_permittivity: float = ...
    sc_carrier_density: float = ...
    external_charges: int = ...
    dielectric_regions: int = ...
    solvent_mode: str = ...
    radius_mode: str = ...
    alpha: float = ...
    softness: float = ...
    solvationrad: List[float] = ...
    stype: int = ...
    rhomax: float = ...
    rhomin: float = ...
    tbeta: float = ...
    solvent_distance: float = ...
    solvent_spread: float = ...
    solvent_radius: float = ...
    radial_scale: float = ...
    radial_spread: float = ...
    filling_threshold: float = ...
    filling_spread: float = ...
    sc_distance: float = ...
    sc_spread: float = ...
    electrolyte_mode: str = ...
    electrolyte_distance: float = ...
    electrolyte_spread: float = ...
    electrolyte_rhomax: float = ...
    electrolyte_rhomin: float = ...
    electrolyte_tbeta: float = ...
    electrolyte_alpha: float = ...
    electrolyte_softness: float = ...
    electrolyte_deriv_method: str = ...
    deriv_method: str = ...
    deriv_core: str = ...
    problem: str = ...
    tol: float = ...
    solver: str = ...
    auxiliary: str = ...
    step_type: str = ...
    step: float = ...
    maxstep: int = ...
    mix_type: str = ...
    ndiis: int = ...
    mix: float = ...
    preconditioner: str = ...
    screening_type: str = ...
    screening: float = ...
    core: str = ...
    inner_solver: str = ...
    inner_core: str = ...
    inner_tol: float = ...
    inner_maxstep: int = ...
    inner_mix: float = ...
    pbc_correction: str = ...
    pbc_core: str = ...
    pbc_dim: int = ...
    pbc_axis: int = ...
    externals: Optional[ExternalsContainer] = ...
    regions: Optional[RegionsContainer] = ...
    def __init__(self, **data: Dict[str, Any]) -> None: ...
    @classmethod
    def set_number_of_atoms(cls: Any, natoms: int) -> None: ...
    def _check_number_of_atoms(cls: Any, value: int) -> int: ...
    def _split_string(cls: Any, value: str) -> List[str]: ...
    def _adjust_vector_size(cls: Any, value: List[str], field: ModelField) -> List[str]: ...
    def _adjust_to_natoms(cls: Any, value: List[str], field: ModelField) -> List[str]: ...
    def _gt_zero(cls: Any, value: IntFloat) -> IntFloat: ...
    def _ge_zero(cls: Any, value: IntFloat) -> IntFloat: ...
    def _ge_zero_many(cls: Any, value: IntFloat) -> IntFloat: ...
    def _gt_one(cls: Any, value: IntFloat) -> IntFloat: ...
    def _ge_one(cls: Any, value: IntFloat) -> IntFloat: ...
    def _valid_switching_function_type(cls: Any, value: int) -> int: ...
    def _valid_dimension(cls: Any, value: int) -> int: ...
    def _valid_axis(cls: Any, value: int) -> int: ...
    def _valid_environment_type(cls: Any, value: str) -> str: ...
    def _valid_electrolyte_entropy(cls: Any, value: str) -> str: ...
    def _valid_solvent_mode(cls: Any, value: str) -> str: ...
    def _valid_deriv_method(cls: Any, value: str) -> str: ...
    def _valid_radius_mode(cls: Any, value: str) -> str: ...
    def _valid_derivatives_core(cls: Any, value: str) -> str: ...
    def _valid_electrostatic_problem(cls: Any, value: str) -> str: ...
    def _valid_electrostatic_solver(cls: Any, value: str) -> str: ...
    def _valid_auxiliary_scheme(cls: Any, value: str) -> str: ...
    def _valid_step_type(cls: Any, value: str) -> str: ...
    def _valid_mix_type(cls: Any, value: str) -> str: ...
    def _valid_preconditioner(cls: Any, value: str) -> str: ...
    def _valid_screening_type(cls: Any, value: str) -> str: ...
    def _valid_electrostatic_core(cls: Any, value: str) -> str: ...
    def _valid_electrostatic_inner_solver(cls: Any, value: str) -> str: ...
    def _valid_pbc_correction(cls: Any, value: str) -> str: ...
    def _valid_pbc_core(cls: Any, value: str) -> str: ...
    def _adjust_input(self) -> None: ...
    def _adjust_environment(self) -> None: ...
    def _adjust_derivatives_method(self) -> None: ...
    def _adjust_electrostatics(self) -> None: ...
    def _check_electrolyte_input(self) -> None: ...
    def _check_dielectric_input(self) -> None: ...
    def _final_validation(self) -> None: ...
    def _validate_derivatives_method(self) -> None: ...
    def _validate_electrostatics(self) -> None: ...
