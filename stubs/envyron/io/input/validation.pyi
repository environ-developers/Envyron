from pydantic import BaseModel
from pydantic_yaml import YamlModelMixin
from typing import Any, Dict, List, Optional
from typing_extensions import TypeAlias

IntFloat: TypeAlias

class CardModel(YamlModelMixin, BaseModel):
    pos: List[float]
    spread: float
    dim: int
    axis: int
    def valid_dimension(cls, value: int) -> int: ...
    def valid_axis(cls, value: int) -> int: ...

class ExternalModel(CardModel):
    charge: float
    def ne_zero(cls, value: IntFloat) -> IntFloat: ...
    def ge_zero(cls, value: IntFloat) -> IntFloat: ...

class RegionModel(CardModel):
    static: float
    optical: float
    width: float
    def ge_zero(cls, value: IntFloat) -> IntFloat: ...
    def ge_one(cls, value: IntFloat) -> IntFloat: ...

class CardContainer(YamlModelMixin, BaseModel):
    units: str
    def valid_units(cls, value: str) -> str: ...

class ExternalsContainer(CardContainer):
    functions: List[List[ExternalModel]]

class RegionsContainer(CardContainer):
    functions: List[List[RegionModel]]

class ControlModel(YamlModelMixin, BaseModel):
    debug: bool
    restart: bool
    verbosity: int
    threshold: float
    nskip: int
    nrep: List[int]
    need_electrostatic: bool
    def _vectorize(cls, value: IntFloat) -> List[IntFloat]: ...
    def _adjust_vector_size(cls, value: List[IntFloat]) -> List[IntFloat]: ...
    def _ge_zero(cls, value: IntFloat) -> IntFloat: ...
    def _ge_zero_many(cls, value: IntFloat) -> IntFloat: ...

class EnvironmentModel(YamlModelMixin, BaseModel):
    type: str
    surface_tension: float
    pressure: float
    confine: float
    static_permittivity: float
    optical_permittivity: float
    temperature: float
    def _ge_zero(cls, value: IntFloat) -> IntFloat: ...
    def _ge_one(cls, value: IntFloat) -> IntFloat: ...
    def _valid_environment_type(cls, value: str) -> str: ...

class IonsModel(YamlModelMixin, BaseModel):
    atomicspread: List[float]
    corespread: List[float]
    solvationrad: List[float]
    def _vectorize(cls, value: IntFloat) -> List[IntFloat]: ...
    def _ge_zero_many(cls, value: IntFloat) -> IntFloat: ...

class SystemModel(YamlModelMixin, BaseModel):
    ntyp: int
    dim: int
    axis: int
    pos: List[float]
    def _vectorize(cls, value: IntFloat) -> List[IntFloat]: ...
    def _adjust_vector_size(cls, value: List[IntFloat]) -> List[IntFloat]: ...
    def _ge_zero(cls, value: IntFloat) -> IntFloat: ...
    def _valid_dimension(cls, value: int) -> int: ...
    def _valid_axis(cls, value: int) -> int: ...

class ElectrolyteModel(YamlModelMixin, BaseModel):
    linearized: bool
    mode: str
    entropy: str
    deriv_method: str
    concentration: float
    formula: Optional[List[int]]
    cionmax: float
    rion: float
    distance: float
    spread: float
    rhomax: float
    rhomin: float
    tbeta: float
    alpha: float
    softness: float
    def _vectorize(cls, value: IntFloat) -> List[IntFloat]: ...
    def _gt_zero(cls, value: IntFloat) -> IntFloat: ...
    def _ge_zero(cls, value: IntFloat) -> IntFloat: ...
    def _valid_mode(cls, value: IntFloat) -> IntFloat: ...
    def _valid_deriv_method(cls, value: str) -> str: ...
    def _valid_entropy(cls, value: str) -> str: ...

class SemiconductorModel(YamlModelMixin, BaseModel):
    permittivity: float
    carrier_density: float
    distance: float
    spread: float
    def _gt_zero(cls, value: IntFloat) -> IntFloat: ...
    def _ge_zero(cls, value: IntFloat) -> IntFloat: ...

class SolventModel(YamlModelMixin, BaseModel):
    mode: str
    radius_mode: str
    deriv_method: str
    deriv_core: str
    distance: float
    spread: float
    radius: float
    alpha: float
    softness: float
    stype: int
    rhomax: float
    rhomin: float
    tbeta: float
    radial_scale: float
    radial_spread: float
    filling_threshold: float
    filling_spread: float
    def _gt_zero(cls, value: IntFloat) -> IntFloat: ...
    def _ge_zero(cls, value: IntFloat) -> IntFloat: ...
    def _ge_one(cls, value: IntFloat) -> IntFloat: ...
    def _valid_switching_function_type(cls, value: int) -> int: ...
    def _valid_mode(cls, value: str) -> str: ...
    def _valid_deriv_method(cls, value: str) -> str: ...
    def _valid_radius_mode(cls, value: str) -> str: ...
    def _valid_derivatives_core(cls, value: str) -> str: ...

class ElectrostaticsModel(YamlModelMixin, BaseModel):
    problem: str
    tol: float
    solver: str
    auxiliary: str
    step_type: str
    step: float
    maxstep: int
    mix_type: str
    ndiis: int
    mix: float
    preconditioner: str
    screening_type: str
    screening: float
    core: str
    inner_solver: str
    inner_core: str
    inner_tol: float
    inner_maxstep: int
    inner_mix: float
    def _gt_zero(cls, value: IntFloat) -> IntFloat: ...
    def _ge_zero(cls, value: IntFloat) -> IntFloat: ...
    def _gt_one(cls, value: IntFloat) -> IntFloat: ...
    def _valid_problem(cls, value: str) -> str: ...
    def _valid_solver(cls, value: str) -> str: ...
    def _valid_auxiliary_scheme(cls, value: str) -> str: ...
    def _valid_step_type(cls, value: str) -> str: ...
    def _valid_mix_type(cls, value: str) -> str: ...
    def _valid_preconditioner(cls, value: str) -> str: ...
    def _valid_screening_type(cls, value: str) -> str: ...
    def _valid_core(cls, value: str) -> str: ...
    def _valid_inner_solver(cls, value: str) -> str: ...

class PBCModel(YamlModelMixin, BaseModel):
    correction: str
    core: str
    dim: int
    axis: int
    def _valid_correction(cls, value: str) -> str: ...
    def _valid_core(cls, value: str) -> str: ...
    def _valid_dimension(cls, value: int) -> int: ...
    def _valid_axis(cls, value: int) -> int: ...

class InputModel(YamlModelMixin, BaseModel):
    control: Optional[ControlModel]
    environment: Optional[EnvironmentModel]
    ions: Optional[IonsModel]
    system: Optional[SystemModel]
    electrolyte: Optional[ElectrolyteModel]
    semiconductor: Optional[SemiconductorModel]
    solvent: Optional[SolventModel]
    electrostatics: Optional[ElectrostaticsModel]
    pbc: Optional[PBCModel]
    externals: Optional[ExternalsContainer]
    regions: Optional[RegionsContainer]
    def __init__(self, natoms: int, **data: Dict[str, Any]) -> None: ...
    def _adjust_to_natoms(self, natoms: int) -> None: ...
    def _adjust_input(self) -> None: ...
    def _adjust_environment(self) -> None: ...
    def _adjust_derivatives_method(self) -> None: ...
    def _adjust_electrostatics(self) -> None: ...
    def _check_electrolyte_input(self) -> None: ...
    def _check_dielectric_input(self) -> None: ...
    def _final_validation(self) -> None: ...
    def _validate_derivatives_method(self) -> None: ...
    def _validate_electrostatics(self) -> None: ...
