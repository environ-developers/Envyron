from .utils import ArrayEntry as ArrayEntry, Entry as Entry, ExternalCard as ExternalCard, RegionCard as RegionCard
from typing import Any, Dict, Union

class Input:
    natoms: Any
    parser: Any
    entries: Any
    externals: Any
    regions: Any
    params: Any
    defaults: Any
    def __init__(self, natoms: int = ...) -> None: ...
    file: Any
    def read(self, filename: str = ...) -> None: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def _read_defaults(self) -> None: ...
    def _build_entry_dictionary(self) -> None: ...
    def _process_user_input(self) -> None: ...
    def _process_input_sections(self) -> None: ...
    def _process_input_options(self, section: str) -> None: ...
    def _process_externals(self) -> None: ...
    def _process_regions(self) -> None: ...
    def _allocate_array_sizes(self, param: ArrayEntry, value: str) -> None: ...
    def _adjust_input(self) -> None: ...
    def _adjust_environment(self) -> None: ...
    def _adjust_derivatives_method(self) -> None: ...
    def _adjust_electrostatics(self) -> None: ...
    def _check_simultaneous_cionmax_rion_setting(self) -> None: ...
    def _check_electrolyte_input(self, correction: str) -> None: ...
    def _check_dielectric_input(self, correction: str) -> None: ...
    def _validate_input(self) -> None: ...
    def _validate_derivatives_method(self) -> None: ...
    def _validate_electrostatics(self) -> None: ...
    def _get_entry(self, option: str) -> Union[Entry, ArrayEntry]: ...
    def _get_value(self, option: str) -> Any: ...

def main() -> None: ...
